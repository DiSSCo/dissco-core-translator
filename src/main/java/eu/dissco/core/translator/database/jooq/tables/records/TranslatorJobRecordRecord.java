/*
 * This file is generated by jOOQ.
 */
package eu.dissco.core.translator.database.jooq.tables.records;


import eu.dissco.core.translator.database.jooq.enums.ErrorCode;
import eu.dissco.core.translator.database.jooq.enums.JobState;
import eu.dissco.core.translator.database.jooq.tables.TranslatorJobRecord;

import java.time.Instant;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TranslatorJobRecordRecord extends UpdatableRecordImpl<TranslatorJobRecordRecord> implements Record7<UUID, JobState, String, Instant, Instant, Integer, ErrorCode> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.translator_job_record.job_id</code>.
     */
    public void setJobId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.translator_job_record.job_id</code>.
     */
    public UUID getJobId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.translator_job_record.job_state</code>.
     */
    public void setJobState(JobState value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.translator_job_record.job_state</code>.
     */
    public JobState getJobState() {
        return (JobState) get(1);
    }

    /**
     * Setter for <code>public.translator_job_record.source_system_id</code>.
     */
    public void setSourceSystemId(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.translator_job_record.source_system_id</code>.
     */
    public String getSourceSystemId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.translator_job_record.time_started</code>.
     */
    public void setTimeStarted(Instant value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.translator_job_record.time_started</code>.
     */
    public Instant getTimeStarted() {
        return (Instant) get(3);
    }

    /**
     * Setter for <code>public.translator_job_record.time_completed</code>.
     */
    public void setTimeCompleted(Instant value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.translator_job_record.time_completed</code>.
     */
    public Instant getTimeCompleted() {
        return (Instant) get(4);
    }

    /**
     * Setter for <code>public.translator_job_record.processed_records</code>.
     */
    public void setProcessedRecords(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.translator_job_record.processed_records</code>.
     */
    public Integer getProcessedRecords() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.translator_job_record.error</code>.
     */
    public void setError(ErrorCode value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.translator_job_record.error</code>.
     */
    public ErrorCode getError() {
        return (ErrorCode) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, JobState, String, Instant, Instant, Integer, ErrorCode> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, JobState, String, Instant, Instant, Integer, ErrorCode> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return TranslatorJobRecord.TRANSLATOR_JOB_RECORD.JOB_ID;
    }

    @Override
    public Field<JobState> field2() {
        return TranslatorJobRecord.TRANSLATOR_JOB_RECORD.JOB_STATE;
    }

    @Override
    public Field<String> field3() {
        return TranslatorJobRecord.TRANSLATOR_JOB_RECORD.SOURCE_SYSTEM_ID;
    }

    @Override
    public Field<Instant> field4() {
        return TranslatorJobRecord.TRANSLATOR_JOB_RECORD.TIME_STARTED;
    }

    @Override
    public Field<Instant> field5() {
        return TranslatorJobRecord.TRANSLATOR_JOB_RECORD.TIME_COMPLETED;
    }

    @Override
    public Field<Integer> field6() {
        return TranslatorJobRecord.TRANSLATOR_JOB_RECORD.PROCESSED_RECORDS;
    }

    @Override
    public Field<ErrorCode> field7() {
        return TranslatorJobRecord.TRANSLATOR_JOB_RECORD.ERROR;
    }

    @Override
    public UUID component1() {
        return getJobId();
    }

    @Override
    public JobState component2() {
        return getJobState();
    }

    @Override
    public String component3() {
        return getSourceSystemId();
    }

    @Override
    public Instant component4() {
        return getTimeStarted();
    }

    @Override
    public Instant component5() {
        return getTimeCompleted();
    }

    @Override
    public Integer component6() {
        return getProcessedRecords();
    }

    @Override
    public ErrorCode component7() {
        return getError();
    }

    @Override
    public UUID value1() {
        return getJobId();
    }

    @Override
    public JobState value2() {
        return getJobState();
    }

    @Override
    public String value3() {
        return getSourceSystemId();
    }

    @Override
    public Instant value4() {
        return getTimeStarted();
    }

    @Override
    public Instant value5() {
        return getTimeCompleted();
    }

    @Override
    public Integer value6() {
        return getProcessedRecords();
    }

    @Override
    public ErrorCode value7() {
        return getError();
    }

    @Override
    public TranslatorJobRecordRecord value1(UUID value) {
        setJobId(value);
        return this;
    }

    @Override
    public TranslatorJobRecordRecord value2(JobState value) {
        setJobState(value);
        return this;
    }

    @Override
    public TranslatorJobRecordRecord value3(String value) {
        setSourceSystemId(value);
        return this;
    }

    @Override
    public TranslatorJobRecordRecord value4(Instant value) {
        setTimeStarted(value);
        return this;
    }

    @Override
    public TranslatorJobRecordRecord value5(Instant value) {
        setTimeCompleted(value);
        return this;
    }

    @Override
    public TranslatorJobRecordRecord value6(Integer value) {
        setProcessedRecords(value);
        return this;
    }

    @Override
    public TranslatorJobRecordRecord value7(ErrorCode value) {
        setError(value);
        return this;
    }

    @Override
    public TranslatorJobRecordRecord values(UUID value1, JobState value2, String value3, Instant value4, Instant value5, Integer value6, ErrorCode value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TranslatorJobRecordRecord
     */
    public TranslatorJobRecordRecord() {
        super(TranslatorJobRecord.TRANSLATOR_JOB_RECORD);
    }

    /**
     * Create a detached, initialised TranslatorJobRecordRecord
     */
    public TranslatorJobRecordRecord(UUID jobId, JobState jobState, String sourceSystemId, Instant timeStarted, Instant timeCompleted, Integer processedRecords, ErrorCode error) {
        super(TranslatorJobRecord.TRANSLATOR_JOB_RECORD);

        setJobId(jobId);
        setJobState(jobState);
        setSourceSystemId(sourceSystemId);
        setTimeStarted(timeStarted);
        setTimeCompleted(timeCompleted);
        setProcessedRecords(processedRecords);
        setError(error);
        resetChangedOnNotNull();
    }
}
