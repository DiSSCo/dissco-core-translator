/*
 * This file is generated by jOOQ.
 */
package eu.dissco.core.translator.database.jooq.tables.records;


import eu.dissco.core.translator.database.jooq.enums.ErrorCode;
import eu.dissco.core.translator.database.jooq.enums.JobState;
import eu.dissco.core.translator.database.jooq.tables.TranslatorJobRecord;

import java.time.Instant;
import java.util.UUID;

import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TranslatorJobRecordRecord extends UpdatableRecordImpl<TranslatorJobRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.translator_job_record.job_id</code>.
     */
    public void setJobId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.translator_job_record.job_id</code>.
     */
    public UUID getJobId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.translator_job_record.job_state</code>.
     */
    public void setJobState(JobState value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.translator_job_record.job_state</code>.
     */
    public JobState getJobState() {
        return (JobState) get(1);
    }

    /**
     * Setter for <code>public.translator_job_record.source_system_id</code>.
     */
    public void setSourceSystemId(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.translator_job_record.source_system_id</code>.
     */
    public String getSourceSystemId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.translator_job_record.time_started</code>.
     */
    public void setTimeStarted(Instant value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.translator_job_record.time_started</code>.
     */
    public Instant getTimeStarted() {
        return (Instant) get(3);
    }

    /**
     * Setter for <code>public.translator_job_record.time_completed</code>.
     */
    public void setTimeCompleted(Instant value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.translator_job_record.time_completed</code>.
     */
    public Instant getTimeCompleted() {
        return (Instant) get(4);
    }

    /**
     * Setter for <code>public.translator_job_record.processed_records</code>.
     */
    public void setProcessedRecords(Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.translator_job_record.processed_records</code>.
     */
    public Integer getProcessedRecords() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.translator_job_record.error</code>.
     */
    public void setError(ErrorCode value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.translator_job_record.error</code>.
     */
    public ErrorCode getError() {
        return (ErrorCode) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TranslatorJobRecordRecord
     */
    public TranslatorJobRecordRecord() {
        super(TranslatorJobRecord.TRANSLATOR_JOB_RECORD);
    }

    /**
     * Create a detached, initialised TranslatorJobRecordRecord
     */
    public TranslatorJobRecordRecord(UUID jobId, JobState jobState, String sourceSystemId, Instant timeStarted, Instant timeCompleted, Integer processedRecords, ErrorCode error) {
        super(TranslatorJobRecord.TRANSLATOR_JOB_RECORD);

        setJobId(jobId);
        setJobState(jobState);
        setSourceSystemId(sourceSystemId);
        setTimeStarted(timeStarted);
        setTimeCompleted(timeCompleted);
        setProcessedRecords(processedRecords);
        setError(error);
        resetChangedOnNotNull();
    }
}
