/*
 * This file is generated by jOOQ.
 */
package eu.dissco.core.translator.database.jooq.tables;


import eu.dissco.core.translator.database.jooq.Keys;
import eu.dissco.core.translator.database.jooq.Public;
import eu.dissco.core.translator.database.jooq.tables.records.SourceSystemRecord;

import java.time.Instant;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SourceSystem extends TableImpl<SourceSystemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.source_system</code>
     */
    public static final SourceSystem SOURCE_SYSTEM = new SourceSystem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SourceSystemRecord> getRecordType() {
        return SourceSystemRecord.class;
    }

    /**
     * The column <code>public.source_system.id</code>.
     */
    public final TableField<SourceSystemRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.source_system.name</code>.
     */
    public final TableField<SourceSystemRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.source_system.endpoint</code>.
     */
    public final TableField<SourceSystemRecord, String> ENDPOINT = createField(DSL.name("endpoint"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.source_system.description</code>.
     */
    public final TableField<SourceSystemRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.source_system.created</code>.
     */
    public final TableField<SourceSystemRecord, Instant> CREATED = createField(DSL.name("created"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.source_system.deleted</code>.
     */
    public final TableField<SourceSystemRecord, Instant> DELETED = createField(DSL.name("deleted"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.source_system.mapping_id</code>.
     */
    public final TableField<SourceSystemRecord, String> MAPPING_ID = createField(DSL.name("mapping_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.source_system.version</code>.
     */
    public final TableField<SourceSystemRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.source_system.creator</code>.
     */
    public final TableField<SourceSystemRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'0000-0002-5669-2769'::text"), SQLDataType.CLOB)), this, "");

    private SourceSystem(Name alias, Table<SourceSystemRecord> aliased) {
        this(alias, aliased, null);
    }

    private SourceSystem(Name alias, Table<SourceSystemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.source_system</code> table reference
     */
    public SourceSystem(String alias) {
        this(DSL.name(alias), SOURCE_SYSTEM);
    }

    /**
     * Create an aliased <code>public.source_system</code> table reference
     */
    public SourceSystem(Name alias) {
        this(alias, SOURCE_SYSTEM);
    }

    /**
     * Create a <code>public.source_system</code> table reference
     */
    public SourceSystem() {
        this(DSL.name("source_system"), null);
    }

    public <O extends Record> SourceSystem(Table<O> child, ForeignKey<O, SourceSystemRecord> key) {
        super(child, key, SOURCE_SYSTEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SourceSystemRecord> getPrimaryKey() {
        return Keys.NEW_SOURCE_SYSTEM_PKEY;
    }

    @Override
    public SourceSystem as(String alias) {
        return new SourceSystem(DSL.name(alias), this);
    }

    @Override
    public SourceSystem as(Name alias) {
        return new SourceSystem(alias, this);
    }

    @Override
    public SourceSystem as(Table<?> alias) {
        return new SourceSystem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SourceSystem rename(String name) {
        return new SourceSystem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SourceSystem rename(Name name) {
        return new SourceSystem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SourceSystem rename(Table<?> name) {
        return new SourceSystem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<String, String, String, String, Instant, Instant, String, Integer, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super String, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super String, ? super String, ? super String, ? super String, ? super Instant, ? super Instant, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
