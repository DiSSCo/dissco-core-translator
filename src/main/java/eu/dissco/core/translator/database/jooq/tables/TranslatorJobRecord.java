/*
 * This file is generated by jOOQ.
 */
package eu.dissco.core.translator.database.jooq.tables;


import eu.dissco.core.translator.database.jooq.Keys;
import eu.dissco.core.translator.database.jooq.Public;
import eu.dissco.core.translator.database.jooq.enums.ErrorCode;
import eu.dissco.core.translator.database.jooq.enums.JobState;
import eu.dissco.core.translator.database.jooq.tables.records.TranslatorJobRecordRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TranslatorJobRecord extends TableImpl<TranslatorJobRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.translator_job_record</code>
     */
    public static final TranslatorJobRecord TRANSLATOR_JOB_RECORD = new TranslatorJobRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TranslatorJobRecordRecord> getRecordType() {
        return TranslatorJobRecordRecord.class;
    }

    /**
     * The column <code>public.translator_job_record.job_id</code>.
     */
    public final TableField<TranslatorJobRecordRecord, UUID> JOB_ID = createField(DSL.name("job_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.translator_job_record.job_state</code>.
     */
    public final TableField<TranslatorJobRecordRecord, JobState> JOB_STATE = createField(DSL.name("job_state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(eu.dissco.core.translator.database.jooq.enums.JobState.class), this, "");

    /**
     * The column <code>public.translator_job_record.source_system_id</code>.
     */
    public final TableField<TranslatorJobRecordRecord, String> SOURCE_SYSTEM_ID = createField(DSL.name("source_system_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.translator_job_record.time_started</code>.
     */
    public final TableField<TranslatorJobRecordRecord, Instant> TIME_STARTED = createField(DSL.name("time_started"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.translator_job_record.time_completed</code>.
     */
    public final TableField<TranslatorJobRecordRecord, Instant> TIME_COMPLETED = createField(DSL.name("time_completed"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.translator_job_record.processed_records</code>.
     */
    public final TableField<TranslatorJobRecordRecord, Integer> PROCESSED_RECORDS = createField(DSL.name("processed_records"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.translator_job_record.error</code>.
     */
    public final TableField<TranslatorJobRecordRecord, ErrorCode> ERROR = createField(DSL.name("error"), SQLDataType.VARCHAR.asEnumDataType(eu.dissco.core.translator.database.jooq.enums.ErrorCode.class), this, "");

    private TranslatorJobRecord(Name alias, Table<TranslatorJobRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private TranslatorJobRecord(Name alias, Table<TranslatorJobRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.translator_job_record</code> table
     * reference
     */
    public TranslatorJobRecord(String alias) {
        this(DSL.name(alias), TRANSLATOR_JOB_RECORD);
    }

    /**
     * Create an aliased <code>public.translator_job_record</code> table
     * reference
     */
    public TranslatorJobRecord(Name alias) {
        this(alias, TRANSLATOR_JOB_RECORD);
    }

    /**
     * Create a <code>public.translator_job_record</code> table reference
     */
    public TranslatorJobRecord() {
        this(DSL.name("translator_job_record"), null);
    }

    public <O extends Record> TranslatorJobRecord(Table<O> child, ForeignKey<O, TranslatorJobRecordRecord> key) {
        super(child, key, TRANSLATOR_JOB_RECORD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TranslatorJobRecordRecord> getPrimaryKey() {
        return Keys.TRANSLATOR_JOB_RECORD_PKEY;
    }

    @Override
    public List<ForeignKey<TranslatorJobRecordRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSLATOR_JOB_RECORD__TRANSLATOR_JOB_RECORD_SOURCE_SYSTEM_ID_FKEY);
    }

    private transient SourceSystem _sourceSystem;

    /**
     * Get the implicit join path to the <code>public.source_system</code>
     * table.
     */
    public SourceSystem sourceSystem() {
        if (_sourceSystem == null)
            _sourceSystem = new SourceSystem(this, Keys.TRANSLATOR_JOB_RECORD__TRANSLATOR_JOB_RECORD_SOURCE_SYSTEM_ID_FKEY);

        return _sourceSystem;
    }

    @Override
    public TranslatorJobRecord as(String alias) {
        return new TranslatorJobRecord(DSL.name(alias), this);
    }

    @Override
    public TranslatorJobRecord as(Name alias) {
        return new TranslatorJobRecord(alias, this);
    }

    @Override
    public TranslatorJobRecord as(Table<?> alias) {
        return new TranslatorJobRecord(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TranslatorJobRecord rename(String name) {
        return new TranslatorJobRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TranslatorJobRecord rename(Name name) {
        return new TranslatorJobRecord(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TranslatorJobRecord rename(Table<?> name) {
        return new TranslatorJobRecord(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, JobState, String, Instant, Instant, Integer, ErrorCode> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super JobState, ? super String, ? super Instant, ? super Instant, ? super Integer, ? super ErrorCode, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super JobState, ? super String, ? super Instant, ? super Instant, ? super Integer, ? super ErrorCode, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
