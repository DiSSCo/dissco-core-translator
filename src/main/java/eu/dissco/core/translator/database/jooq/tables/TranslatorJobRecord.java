/*
 * This file is generated by jOOQ.
 */
package eu.dissco.core.translator.database.jooq.tables;


import eu.dissco.core.translator.database.jooq.Keys;
import eu.dissco.core.translator.database.jooq.Public;
import eu.dissco.core.translator.database.jooq.enums.ErrorCode;
import eu.dissco.core.translator.database.jooq.enums.JobState;
import eu.dissco.core.translator.database.jooq.tables.records.TranslatorJobRecordRecord;

import java.time.Instant;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TranslatorJobRecord extends TableImpl<TranslatorJobRecordRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.translator_job_record</code>
     */
    public static final TranslatorJobRecord TRANSLATOR_JOB_RECORD = new TranslatorJobRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TranslatorJobRecordRecord> getRecordType() {
        return TranslatorJobRecordRecord.class;
    }

    /**
     * The column <code>public.translator_job_record.job_id</code>.
     */
    public final TableField<TranslatorJobRecordRecord, UUID> JOB_ID = createField(DSL.name("job_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.translator_job_record.job_state</code>.
     */
    public final TableField<TranslatorJobRecordRecord, JobState> JOB_STATE = createField(DSL.name("job_state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(JobState.class), this, "");

    /**
     * The column <code>public.translator_job_record.source_system_id</code>.
     */
    public final TableField<TranslatorJobRecordRecord, String> SOURCE_SYSTEM_ID = createField(DSL.name("source_system_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.translator_job_record.time_started</code>.
     */
    public final TableField<TranslatorJobRecordRecord, Instant> TIME_STARTED = createField(DSL.name("time_started"), SQLDataType.INSTANT.nullable(false), this, "");

    /**
     * The column <code>public.translator_job_record.time_completed</code>.
     */
    public final TableField<TranslatorJobRecordRecord, Instant> TIME_COMPLETED = createField(DSL.name("time_completed"), SQLDataType.INSTANT, this, "");

    /**
     * The column <code>public.translator_job_record.processed_records</code>.
     */
    public final TableField<TranslatorJobRecordRecord, Integer> PROCESSED_RECORDS = createField(DSL.name("processed_records"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.translator_job_record.error</code>.
     */
    public final TableField<TranslatorJobRecordRecord, ErrorCode> ERROR = createField(DSL.name("error"), SQLDataType.VARCHAR.asEnumDataType(ErrorCode.class), this, "");

    private TranslatorJobRecord(Name alias, Table<TranslatorJobRecordRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TranslatorJobRecord(Name alias, Table<TranslatorJobRecordRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.translator_job_record</code> table
     * reference
     */
    public TranslatorJobRecord(String alias) {
        this(DSL.name(alias), TRANSLATOR_JOB_RECORD);
    }

    /**
     * Create an aliased <code>public.translator_job_record</code> table
     * reference
     */
    public TranslatorJobRecord(Name alias) {
        this(alias, TRANSLATOR_JOB_RECORD);
    }

    /**
     * Create a <code>public.translator_job_record</code> table reference
     */
    public TranslatorJobRecord() {
        this(DSL.name("translator_job_record"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TranslatorJobRecordRecord> getPrimaryKey() {
        return Keys.TRANSLATOR_JOB_RECORD_PKEY;
    }

    @Override
    public TranslatorJobRecord as(String alias) {
        return new TranslatorJobRecord(DSL.name(alias), this);
    }

    @Override
    public TranslatorJobRecord as(Name alias) {
        return new TranslatorJobRecord(alias, this);
    }

    @Override
    public TranslatorJobRecord as(Table<?> alias) {
        return new TranslatorJobRecord(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TranslatorJobRecord rename(String name) {
        return new TranslatorJobRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TranslatorJobRecord rename(Name name) {
        return new TranslatorJobRecord(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TranslatorJobRecord rename(Table<?> name) {
        return new TranslatorJobRecord(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TranslatorJobRecord where(Condition condition) {
        return new TranslatorJobRecord(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TranslatorJobRecord where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TranslatorJobRecord where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TranslatorJobRecord where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TranslatorJobRecord where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TranslatorJobRecord where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TranslatorJobRecord where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TranslatorJobRecord where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TranslatorJobRecord whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TranslatorJobRecord whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
